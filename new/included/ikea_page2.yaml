        id: page2
        lambda: |- 
          it.line(0,35,30,35, white);
          it.line(98,35,128,35, white);
          it.line(64,0,64,25, white);
          it.print(0, 22, id(font11), white, "TEMP");
          it.print(92, 22, id(font11), white, "HYDRO");

          it.line(0,130,22,130, white);          
          it.line(102,130,128,130, white); 
          
          // цифровые часы
          it.strftime(25, 136, id(SEG24), lyellow,"%H %M", id(sntp_time).now());
          static int i = 0;
          i++;
          if ((i % 2) == 0) 
            it.print(65, 136, id(SEG24),lyellow,":");
          it.print(0, 131, id(font11), lyellow, "TIME");
          
          // влажность
          it.printf(70,0, id(SEG24), blue, "%2.0f", id(bme680_h).state);
          it.print(110, 0, id(icon_font), blue, "\U0000f87e");
          
          // температура
          uint16_t vt = (id(bme680_t).state);
          float td;
          float tc = modf( vt, &td);
          it.printf(0, 0, id(SEG24), green, "%2.0f.", td);
          it.printf(40, 12, id(SEG12), green, "%1.0f", tc*10);
          it.print(38, 0, id(font11), green, "°С");

          // оформление центра
          it.printf(64, 80, id(SEG24), white, TextAlign::CENTER, "%.0f", id(pm2).state);
          it.print(64, 105, id(font11), white, TextAlign::CENTER, "ppm");
          it.print(64, 130, id(font11), white, TextAlign::CENTER, "PM2.5");

          // Индикатор сонца над горизонтом
          if ((id(elevation).state) > 0) {
            id(g_sun).next_frame();
            it.image(110, 140, id(g_sun), yellow);
            }
          else {
            it.image(110, 140, id(g_moon), white);
            id(g_moon).next_frame();
            }
          // Состояние вентилятора
          if (id(vent_bin).state) {
            it.image(0, 140, id(g_fan));
            id(g_fan).next_frame();
          }

          // Размеры
          int centerX = 64; 
          int centerY = 85; 
          int radius = 60;
          int zradius = 55;
          int vradius = 46;
          int mradius = 40;
          int width = 3;

          // Большой белый
          //PI / 180 = 0.0174533
          for (int grad = 130; grad <= 175; grad++) {
            float radian = grad * 0.0174533;
            it.draw_pixel_at(centerX+radius*cos(radian), centerY+radius*sin(radian), white);
          }
          for (int grad = 185; grad <= 260; grad++) {
            float radian = grad * 0.0174533;
            it.draw_pixel_at(centerX+radius*cos(radian), centerY+radius*sin(radian), white);
          }
          for (int grad = 280; grad <= 355; grad++) {
            float radian = grad * 0.0174533;
            it.draw_pixel_at(centerX+radius*cos(radian), centerY+radius*sin(radian), white);
          }
          for (int grad = 365; grad <= 410; grad++) {
            float radian = grad * 0.0174533;
            it.draw_pixel_at(centerX+radius*cos(radian), centerY+radius*sin(radian), white);
          }

          // Малый белый
          for (int grad = 135; grad <= 405; grad++) {
            float radian = grad * 0.0174533;
            it.draw_pixel_at(centerX+mradius*cos(radian), centerY+mradius*sin(radian), white);
          }
          for (int grad = 60; grad <= 120; grad++) {
            //PI / 180 = 0.0174533 
            float radian = grad * 0.0174533;
            it.draw_pixel_at(centerX+mradius*cos(radian), centerY+mradius*sin(radian), white);
          }

          // Цветное сопровождение значение/2+135 (начало)
          for (int grad = 135; grad <= 150; grad++) {
            float radian = grad * 0.0174533;
            it.filled_circle(centerX+vradius*cos(radian), centerY+vradius*sin(radian), width,  green);
          }  
          for (int grad = 151; grad <= 165; grad++) {
            float radian = grad * 0.0174533;
            it.filled_circle(centerX+vradius*cos(radian), centerY+vradius*sin(radian), width,  lgreen);
          }  
          for (int grad = 166; grad <= 180; grad++) {
            float radian = grad * 0.0174533;
            it.filled_circle(centerX+vradius*cos(radian), centerY+vradius*sin(radian), width,  yellow);
          } 
          for (int grad = 181; grad <= 195; grad++) {
            float radian = grad * 0.0174533;
            it.filled_circle(centerX+vradius*cos(radian), centerY+vradius*sin(radian), width,  lyellow);
          } 
          for (int grad = 196; grad <= 260; grad++) {
            float radian = grad * 0.0174533;
            it.filled_circle(centerX+vradius*cos(radian), centerY+vradius*sin(radian), width,  red);
          } 
          for (int grad = 261; grad <= 410; grad++) {
            float radian = grad * 0.0174533;
            it.filled_circle(centerX+vradius*cos(radian), centerY+vradius*sin(radian), width,  tred);
          } 

          // Значения PM2.5 значение/2+135 (начало)
          uint16_t vpm2 = (id(pm2).state);
          switch (vpm2) {
            case 0 ... 30:
              if (id(pm2).state); {
                for (int grad = 135; grad <= id(pm2).state *0.5 + 135; grad++) {
                  float radian = grad * 0.0174533;
                  it.filled_circle(centerX+zradius*cos(radian), centerY+zradius*sin(radian), width, green);
                }  
              }
              break;
            case 31 ... 60:
              if (id(pm2).state); {
                for (int grad = 135; grad <= id(pm2).state *0.5 + 135; grad++)  {
                  float radian = grad * 0.0174533;
                  it.filled_circle(centerX+zradius*cos(radian), centerY+zradius*sin(radian), width, lgreen);
                }  
              }
              break;
            case 61 ... 90: 
              if (id(pm2).state); {
                for (int grad = 135; grad <= id(pm2).state *0.5 + 135; grad++)  {
                  float radian = grad * 0.0174533;
                  it.filled_circle(centerX+zradius*cos(radian), centerY+zradius*sin(radian), width, yellow);
                }  
              }
              break;
            case 91 ... 120: 
              if (id(pm2).state); {
                for (int grad = 135; grad <= id(pm2).state *0.5 + 135; grad++)  {
                  float radian = grad * 0.0174533;
                  it.filled_circle(centerX+zradius*cos(radian), centerY+zradius*sin(radian), width, lyellow);
                }  
              }
              break;
            case 121 ... 250: 
              if (id(pm2).state); {
                for (int grad = 135; grad <= id(pm2).state *0.5 + 135; grad++)  {
                  float radian = grad * 0.0174533;
                  it.filled_circle(centerX+zradius*cos(radian), centerY+zradius*sin(radian), width, red);
                }  
              }
              break;
            case 251 ... 1000:
              if (id(pm2).state); {
                for (int grad = 135; grad <= id(pm2).state *0.5 + 135; grad++)  {
                  float radian = grad * 0.0174533;
                  it.filled_circle(centerX+zradius*cos(radian), centerY+zradius*sin(radian), width, tred);
                }  
              }
              break;
            default: 
              if (id(pm2).state); {
                for (int grad = 135; grad <= id(pm2).state *0.5 + 135; grad++) {
                  float radian = grad * 0.0174533;
                  it.filled_circle(centerX+zradius*cos(radian), centerY+zradius*sin(radian), width, blue);
                }  
              }
              break;              
          }